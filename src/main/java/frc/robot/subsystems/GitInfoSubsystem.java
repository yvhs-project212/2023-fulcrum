// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;

import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.IOException;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Filesystem;

public class GitInfoSubsystem extends SubsystemBase {

  public final File deployDir = Filesystem.getDeployDirectory();
  private String commitHash;
  private String branch;
  private String tags;
  private String modifiedFiles;

 /** Creates a new GitInfoSubsystem. */
 public GitInfoSubsystem() {
   /* The files being read below (commit.txt, etc.) are automatically generated
    * by the build.gradle file in the project root directory.  They are
    * written to the roboRIO's deploy directory, given by the
    * Filesystem.getDeployDirectory() method.
    */
   commitHash = firstLineOrErrorMessage("commit.txt");
   branch = firstLineOrErrorMessage("branch.txt");
   tags = firstLineOrErrorMessage("tags.txt");
   modifiedFiles = firstLineOrErrorMessage("mods.txt");
 }

  /**
   *  Read one of the "Git info" files generated by build.gradle, and return
   * its first line (which happens to be its entire contents), with white
   * space removed.
   *
   * @return (String) first line contents
   * @return null if the file doesn't exist
   * @return (String) "" if the file exists but has no content
   */
  private String getFirstLineOfGitInfoFile(String filename) {
    File gitFile = new File(deployDir, filename);
    String returnValue;
    try {
      BufferedReader br = new BufferedReader(new FileReader(gitFile));
      String fileFirstLine = br.readLine();
      if (fileFirstLine == null) {
        returnValue = "";
      } else {
        returnValue = fileFirstLine.trim();
      }
      br.close();
    } catch (IOException e) {
      returnValue = null;
    }
    return returnValue;
  }

  private String firstLineOrErrorMessage(String filename) {
    String firstLine = getFirstLineOfGitInfoFile(filename);
    if (firstLine == null) {
      return "[error reading file \"" + filename + "\"]";
    }
    return firstLine;
  }

  // TODO: detect unpushed local commits
  // Reference: https://stackoverflow.com/questions/66538841/git-programatically-determine-if-local-commits-have-not-been-pushed

  public String commitHash() {
    return commitHash;
  }

  public String branch() {
    return branch;
  }

  public String tags() {
    return tags;
  }

  public String modifiedFiles() {
    return modifiedFiles;
  }

  @Override
  public void periodic() {
    // (The GitInfoSubsystem only updates on startup, not during operation.)
  }

  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run during simulation
  }
}